// ************************************************************************ //
// WARNING
// -------
// This file is generated by the Type Library importer or Type Libary Editor.
// Barring syntax errors, the Editor will parse modifications made to the file.
// However, when applying changes via the Editor this file will be regenerated
// and comments or formatting changes will be lost.
// ************************************************************************ //
// File generated on 15.02.2010 21:45:42 (- $Rev: 12980 $, 19393515).

[
  uuid(948089DD-AE87-43C3-8B57-B5C0AA978577),
  version(1.0)

]
library SmartBluetoothMarketing
{

  importlib("stdole2.tlb");
  importlib("stdvcl40.dll");

  interface ISBMApplication;
  dispinterface ISBMApplicationEvents;
  coclass SBMApplication;
  interface ISBMOptions;
  interface ISBMCampaign;
  interface ISBMCampaignDaySchedule;


  [
    uuid(5D0C9810-DE8C-49B4-859C-16F69D50EEC8)
  ]
  enum SBMCampaignPriority
  {
    SBMCampaignPriorityHighest = 100,
    SBMCampaignPriorityHigh = 50,
    SBMCampaignPriorityNormal = 0,
    SBMCampaignPriorityLow = -50,
    SBMCampaignPriorityLowest = -100
  };

  [
    uuid(9BD414EA-51DF-4DB1-9705-1E187A28877C)
  ]
  enum SBMState
  {
    SBMStopped = 0,
    SBMStopping = 1,
    SBMStarting = 2,
    SBMStarted = 3
  };

  [
    uuid(83452919-48AA-4C32-A1DE-63459B82EF86)
  ]
  enum SBMStartup
  {
    SBMStartupDontStart = 0,
    SBMStartupStart = 1,
    SBMStartupRestore = 2
  };

  [
    uuid(56C720AE-BD8A-41A8-9CC4-9578910BE39F)
  ]
  enum SBMAutoResetUnit
  {
    SBMAutoresetMinutes = 0,
    SBMAutoresetHours = 1,
    SBMAutoresetDays = 2,
    SBMAutoresetWeeks = 3,
    SBMAutoresetMonths = 4
  };

  [
    uuid(0C79126C-9BC1-484E-9AD5-CE6DBADEC969)
  ]
  enum SBMDataFormat
  {
    SBMFormatMSO = 0,
    SBMFormatDataPacket = 1
  };

  [
    uuid(F378F1AC-73CF-4F17-B076-03EB1B4F3937),
    helpstring("Dispatch interface for SBMApplication Object"),
    dual,
    oleautomation
  ]
  interface ISBMApplication: IDispatch
  {
    [propget, id(0x000000C9)]
    HRESULT _stdcall Version([out, retval] BSTR Value);
    [id(0x000000CA)]
    HRESULT _stdcall Connect([in] BSTR Password);
    [propget, id(0x000000CB)]
    HRESULT _stdcall IsBluetoothOK([out, retval] VARIANT_BOOL* Value);
    [id(0x000000CC)]
    HRESULT _stdcall Minimize(void);
    [id(0x000000CD)]
    HRESULT _stdcall Restore(void);
    [id(0x000000CE)]
    HRESULT _stdcall Quit(void);
    [propget, id(0x000000CF)]
    HRESULT _stdcall Options([out, retval] ISBMOptions** Value);
    [id(0x000000D0)]
    HRESULT _stdcall DisplayOptionsDialog(void);
    [propget, id(0x000000D1)]
    HRESULT _stdcall SenderState([out, retval] enum SBMState* Value);
    [propget, id(0x000000D2)]
    HRESULT _stdcall ReceiverState([out, retval] enum SBMState* Value);
    [id(0x000000D3)]
    HRESULT _stdcall StartSender(void);
    [id(0x000000D4)]
    HRESULT _stdcall StopSender(void);
    [id(0x000000D5)]
    HRESULT _stdcall StartReceiver(void);
    [id(0x000000D6)]
    HRESULT _stdcall StopReceiver(void);
    [id(0x000000D7)]
    HRESULT _stdcall RenameLocalRadio([in] BSTR NewName);
    [propget, id(0x000000D8)]
    HRESULT _stdcall CampaignCount([out, retval] long* Value);
    [propget, id(0x000000D9)]
    HRESULT _stdcall Campaigns([in] long index, [out, retval] ISBMCampaign** Value);
    [id(0x000000DA)]
    HRESULT _stdcall CampaignByID([in] long ID, [out, retval] ISBMCampaign** Campaign);
    [id(0x000000DB)]
    HRESULT _stdcall CreateNewCampaign([out, retval] ISBMCampaign** Campaign);
    [id(0x000000DC)]
    HRESULT _stdcall DeleteCampaign([in] long index);
    [id(0x000000DD)]
    HRESULT _stdcall DeleteCampaignByID([in] long ID);
    [id(0x000000DE)]
    HRESULT _stdcall DuplicateCampaign([in] long index, [out, retval] ISBMCampaign** Campaign);
    [id(0x000000DF)]
    HRESULT _stdcall DuplicateCampaignByID([in] long ID, [out, retval] ISBMCampaign** Campaign);
  };

  [
    uuid(A32F4F3D-070A-4598-B19E-B04211A34965),
    dual,
    oleautomation
  ]
  interface ISBMOptions: IDispatch
  {
    [id(0x000000C9)]
    HRESULT _stdcall UseDefaults(void);
    [propget, id(0x000000CA)]
    HRESULT _stdcall SenderMaxConnections([out, retval] long* Value);
    [propput, id(0x000000CA)]
    HRESULT _stdcall SenderMaxConnections([in] long Value);
    [propget, id(0x000000CB)]
    HRESULT _stdcall SenderDiscoveryLength([out, retval] long* Value);
    [propput, id(0x000000CB)]
    HRESULT _stdcall SenderDiscoveryLength([in] long Value);
    [propget, id(0x000000CC)]
    HRESULT _stdcall SenderDiscoveryInterval([out, retval] long* Value);
    [propput, id(0x000000CC)]
    HRESULT _stdcall SenderDiscoveryInterval([in] long Value);
    [propget, id(0x000000CD)]
    HRESULT _stdcall SenderTimeout([out, retval] long* Value);
    [propput, id(0x000000CD)]
    HRESULT _stdcall SenderTimeout([in] long Value);
    [propget, id(0x000000CE)]
    HRESULT _stdcall SenderRetriesIfRejected([out, retval] long* Value);
    [propput, id(0x000000CE)]
    HRESULT _stdcall SenderRetriesIfRejected([in] long Value);
    [propget, id(0x000000CF)]
    HRESULT _stdcall SenderRetriesIfFailed([out, retval] long* Value);
    [propput, id(0x000000CF)]
    HRESULT _stdcall SenderRetriesIfFailed([in] long Value);
    [propget, id(0x000000D0)]
    HRESULT _stdcall SenderTryAfterIfRejected([out, retval] long* Value);
    [propput, id(0x000000D0)]
    HRESULT _stdcall SenderTryAfterIfRejected([in] long Value);
    [propget, id(0x000000D1)]
    HRESULT _stdcall SenderEnableAuth([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x000000D1)]
    HRESULT _stdcall SenderEnableAuth([in] VARIANT_BOOL Value);
    [propget, id(0x000000D2)]
    HRESULT _stdcall SenderDefaultPIN([out, retval] BSTR* Value);
    [propput, id(0x000000D2)]
    HRESULT _stdcall SenderDefaultPIN([in] BSTR Value);
    [propget, id(0x000000D3)]
    HRESULT _stdcall SenderStartup([out, retval] enum SBMStartup* Value);
    [propput, id(0x000000D3)]
    HRESULT _stdcall SenderStartup([in] enum SBMStartup Value);
    [propget, id(0x000000D4)]
    HRESULT _stdcall SenderTrackAll([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x000000D4)]
    HRESULT _stdcall SenderTrackAll([in] VARIANT_BOOL Value);
    [propget, id(0x000000D5)]
    HRESULT _stdcall SenderCreateTextLog([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x000000D5)]
    HRESULT _stdcall SenderCreateTextLog([in] VARIANT_BOOL Value);
    [propget, id(0x000000D6)]
    HRESULT _stdcall SenderLogFolder([out, retval] BSTR* Value);
    [propput, id(0x000000D6)]
    HRESULT _stdcall SenderLogFolder([in] BSTR Value);
    [propget, id(0x000000D7)]
    HRESULT _stdcall ReceiverStartup([out, retval] enum SBMStartup* Value);
    [propput, id(0x000000D7)]
    HRESULT _stdcall ReceiverStartup([in] enum SBMStartup Value);
    [propget, id(0x000000D8)]
    HRESULT _stdcall ReceiverDisplayBalloon([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x000000D8)]
    HRESULT _stdcall ReceiverDisplayBalloon([in] VARIANT_BOOL Value);
    [propget, id(0x000000D9)]
    HRESULT _stdcall ReceiverPlaySound([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x000000D9)]
    HRESULT _stdcall ReceiverPlaySound([in] VARIANT_BOOL Value);
    [propget, id(0x000000DA)]
    HRESULT _stdcall ReceiverSoundFile([out, retval] BSTR* Value);
    [propput, id(0x000000DA)]
    HRESULT _stdcall ReceiverSoundFile([in] BSTR Value);
    [propget, id(0x000000DB)]
    HRESULT _stdcall ReceiverMaxFileSize([out, retval] long* Value);
    [propput, id(0x000000DB)]
    HRESULT _stdcall ReceiverMaxFileSize([in] long Value);
    [propget, id(0x000000DC)]
    HRESULT _stdcall ReceiverMaxMessagesPerDevice([out, retval] long* Value);
    [propput, id(0x000000DC)]
    HRESULT _stdcall ReceiverMaxMessagesPerDevice([in] long Value);
    [propget, id(0x000000DD)]
    HRESULT _stdcall ReceiverAutoSave([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x000000DD)]
    HRESULT _stdcall ReceiverAutoSave([in] VARIANT_BOOL Value);
    [propget, id(0x000000DE)]
    HRESULT _stdcall ReceiverAutoSaveFolder([out, retval] BSTR* Value);
    [propput, id(0x000000DE)]
    HRESULT _stdcall ReceiverAutoSaveFolder([in] BSTR Value);
  };

  [
    uuid(0C5FD8AB-0D9F-4CCE-B777-F95ED620056D),
    dual,
    oleautomation
  ]
  interface ISBMCampaign: IDispatch
  {
    [propget, id(0x000000C9)]
    HRESULT _stdcall ID([out, retval] long* Value);
    [id(0x000000CA)]
    HRESULT _stdcall Start(void);
    [id(0x000000CB)]
    HRESULT _stdcall Stop(void);
    [propget, id(0x000000CC)]
    HRESULT _stdcall Started([out, retval] VARIANT_BOOL* Value);
    [id(0x000000CD)]
    HRESULT _stdcall Reset(void);
    [propget, id(0x000000CE)]
    HRESULT _stdcall ResetDate([out, retval] DATE* Value);
    [id(0x000000CF)]
    HRESULT _stdcall DisplayEditDialog(void);
    [propget, id(0x000000D0)]
    HRESULT _stdcall Title([out, retval] BSTR* Value);
    [propput, id(0x000000D0)]
    HRESULT _stdcall Title([in] BSTR Value);
    [propget, id(0x000000D1)]
    HRESULT _stdcall Comments([out, retval] BSTR* Value);
    [propput, id(0x000000D1)]
    HRESULT _stdcall Comments([in] BSTR Value);
    [propget, id(0x000000D2)]
    HRESULT _stdcall IsPrivate([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x000000D2)]
    HRESULT _stdcall IsPrivate([in] VARIANT_BOOL Value);
    [propget, id(0x000000D3)]
    HRESULT _stdcall Priority([out, retval] enum SBMCampaignPriority* Value);
    [propput, id(0x000000D3)]
    HRESULT _stdcall Priority([in] enum SBMCampaignPriority Value);
    [propget, id(0x000000D4)]
    HRESULT _stdcall FileName([out, retval] BSTR* Value);
    [propput, id(0x000000D4)]
    HRESULT _stdcall FileName([in] BSTR Value);
    [propget, id(0x000000D5)]
    HRESULT _stdcall RawBytes([out, retval] SAFEARRAY(byte) * Value);
    [propput, id(0x000000D5)]
    HRESULT _stdcall RawBytes([in] SAFEARRAY(byte) Value);
    [id(0x000000D6)]
    HRESULT _stdcall AttachFile([in] BSTR FileName, [in] VARIANT_BOOL Store);
    [id(0x000000D7)]
    HRESULT _stdcall AttachText([in] BSTR Text, [in] BSTR Name);
    [propget, id(0x000000D8)]
    HRESULT _stdcall StartDate([out, retval] DATE* Value);
    [propget, id(0x000000D9)]
    HRESULT _stdcall EndDate([out, retval] DATE* Value);
    [id(0x000000DA)]
    HRESULT _stdcall SetDates([in] DATE StartDate, [in] DATE EndDate);
    [propget, id(0x000000DB)]
    HRESULT _stdcall ScheduleEnabled([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x000000DB)]
    HRESULT _stdcall ScheduleEnabled([in] VARIANT_BOOL Value);
    [propget, id(0x000000DC)]
    HRESULT _stdcall Schedule([in] long index, [out, retval] ISBMCampaignDaySchedule** Value);
    [id(0x000000DD)]
    HRESULT _stdcall ResetSchedule(void);
    [propget, id(0x000000DE)]
    HRESULT _stdcall MaxCount([out, retval] long* Value);
    [propput, id(0x000000DE)]
    HRESULT _stdcall MaxCount([in] long Value);
    [propget, id(0x000000DF)]
    HRESULT _stdcall RandomRatio([out, retval] CURRENCY* Value);
    [propput, id(0x000000DF)]
    HRESULT _stdcall RandomRatio([in] CURRENCY Value);
    [propget, id(0x000000E0)]
    HRESULT _stdcall AutoReset([out, retval] long* Value);
    [propput, id(0x000000E0)]
    HRESULT _stdcall AutoReset([in] long Value);
    [propget, id(0x000000E1)]
    HRESULT _stdcall AutoResetUnits([out, retval] enum SBMAutoResetUnit* Value);
    [propput, id(0x000000E1)]
    HRESULT _stdcall AutoResetUnits([in] enum SBMAutoResetUnit Value);
    [propget, id(0x000000E2)]
    HRESULT _stdcall TotalOK([out, retval] long* Value);
    [propget, id(0x000000E3)]
    HRESULT _stdcall TotalFailed([out, retval] long* Value);
    [propget, id(0x000000E4)]
    HRESULT _stdcall TotalRejected([out, retval] long* Value);
    [propget, id(0x000000E5)]
    HRESULT _stdcall StatusText([out, retval] BSTR* Value);
    [id(0x000000E6)]
    HRESULT _stdcall GetStatistics([in] DATE FromDate, [in] enum SBMDataFormat OutputType, [out, retval] BSTR* Data);
  };

  [
    uuid(9B612D22-87A7-45BD-A3C2-A075D2D2B18C),
    dual,
    oleautomation
  ]
  interface ISBMCampaignDaySchedule: IDispatch
  {
    [propget, id(0x000000C9)]
    HRESULT _stdcall Enabled([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x000000C9)]
    HRESULT _stdcall Enabled([in] VARIANT_BOOL Value);
    [propget, id(0x000000CA)]
    HRESULT _stdcall StartMinute([out, retval] long* Value);
    [propget, id(0x000000CB)]
    HRESULT _stdcall EndMinute([out, retval] long* Value);
    [id(0x000000CC)]
    HRESULT _stdcall SetPeriod([in] long StartMinute, [in] long EndMinute);
  };

  [
    uuid(D668206D-8633-4E68-8D42-FFF1C8B1AE61),
    helpstring("Events interface for SBMApplication Object")
  ]
  dispinterface ISBMApplicationEvents
  {
    properties:
    methods:
  };

  [
    uuid(C78BACD4-281C-4A91-8239-C56C1F821882),
    helpstring("SBMApplication Object")
  ]
  coclass SBMApplication
  {
    [default] interface ISBMApplication;
    [default, source] dispinterface ISBMApplicationEvents;
  };

};
